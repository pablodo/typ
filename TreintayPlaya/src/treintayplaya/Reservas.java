/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Reservas.java
 *
 * Created on 09-sep-2011, 2:20:56
 */
package treintayplaya;

import java.awt.Color;
import java.text.NumberFormat;
import java.util.GregorianCalendar;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author sergio
 */
public class Reservas extends javax.swing.JFrame {
    private int year;
    private int month;
    private GregorianCalendar calendar = new GregorianCalendar();

    /** Creates new form Reservas */
    public Reservas() {
        this.year = this.calendar.get(GregorianCalendar.YEAR);
        this.month = this.calendar.get(GregorianCalendar.MONTH);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jppmEstado = new javax.swing.JPopupMenu();
        jmiReserva = new javax.swing.JMenuItem();
        jmiConfirma = new javax.swing.JMenuItem();
        jmiCerrado = new javax.swing.JMenuItem();
        jmiAnula = new javax.swing.JMenuItem();
        jbAnterior = new javax.swing.JButton();
        jbSiguiente = new javax.swing.JButton();
        jlblMesActual = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblVistaReservas = new javax.swing.JTable();

        jmiReserva.setText("Reserva");
        jmiReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiReservaActionPerformed(evt);
            }
        });
        jppmEstado.add(jmiReserva);

        jmiConfirma.setText("Confirma Reserva");
        jmiConfirma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiConfirmaActionPerformed(evt);
            }
        });
        jppmEstado.add(jmiConfirma);

        jmiCerrado.setText("Contrato Cerrado");
        jmiCerrado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiCerradoActionPerformed(evt);
            }
        });
        jppmEstado.add(jmiCerrado);

        jmiAnula.setText("Anula");
        jmiAnula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAnulaActionPerformed(evt);
            }
        });
        jppmEstado.add(jmiAnula);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Consultas de Reservas");

        jbAnterior.setText("Anterior");
        jbAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAnteriorActionPerformed(evt);
            }
        });

        jbSiguiente.setText("Siguiente");
        jbSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSiguienteActionPerformed(evt);
            }
        });

        jlblMesActual.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jlblMesActual.setText(this.getMesActual());
        jlblMesActual.setFocusable(false);
        jlblMesActual.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jtblVistaReservas.setModel(this.getTableModel());
        jtblVistaReservas.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jtblVistaReservas.setCellSelectionEnabled(true);
        jtblVistaReservas.setComponentPopupMenu(jppmEstado);
        jtblVistaReservas.setGridColor(new java.awt.Color(204, 204, 204));
        jtblVistaReservas.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jtblVistaReservas.getTableHeader().setResizingAllowed(false);
        jtblVistaReservas.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jtblVistaReservas);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jbAnterior)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jlblMesActual, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jbSiguiente))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(8, 8, 8)
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 947, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jbAnterior)
                    .add(jlblMesActual)
                    .add(jbSiguiente))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 545, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jmiReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiReservaActionPerformed
        // TODO add your handling code here:
        
        for(int celda = 0; celda < jtblVistaReservas.getColumnCount(); celda++) {
            if (jtblVistaReservas.isCellSelected(jtblVistaReservas.getSelectedRow(), celda)) {
                jtblVistaReservas.setValueAt("R", jtblVistaReservas.getSelectedRow(), celda);
            }
        }
    }//GEN-LAST:event_jmiReservaActionPerformed

    private void jmiConfirmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiConfirmaActionPerformed
        // TODO add your handling code here:
        for(int celda = 0; celda < jtblVistaReservas.getColumnCount(); celda++) {
            if (jtblVistaReservas.isCellSelected(jtblVistaReservas.getSelectedRow(), celda)) {
                jtblVistaReservas.setValueAt("C", jtblVistaReservas.getSelectedRow(), celda);
            }
        }
    }//GEN-LAST:event_jmiConfirmaActionPerformed

    private void jmiCerradoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiCerradoActionPerformed
        // TODO add your handling code here:
        for(int celda = 0; celda < jtblVistaReservas.getColumnCount(); celda++) {
            if (jtblVistaReservas.isCellSelected(jtblVistaReservas.getSelectedRow(), celda)) {
                jtblVistaReservas.setValueAt("O", jtblVistaReservas.getSelectedRow(), celda);
            }
        }
    }//GEN-LAST:event_jmiCerradoActionPerformed

    private void jmiAnulaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAnulaActionPerformed
        // TODO add your handling code here:
        for(int celda = 0; celda < jtblVistaReservas.getColumnCount(); celda++) {
            if (jtblVistaReservas.isCellSelected(jtblVistaReservas.getSelectedRow(), celda)) {
                jtblVistaReservas.setValueAt("", jtblVistaReservas.getSelectedRow(), celda);
            }
        }
    }//GEN-LAST:event_jmiAnulaActionPerformed

    private void jbAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAnteriorActionPerformed
        if (this.month == 0){
            this.month = 11;
            this.year--;
        }else{
            this.month--;
        }
        this.updateDate();
        this.jtblVistaReservas.setModel(this.getTableModel());
    }//GEN-LAST:event_jbAnteriorActionPerformed

    private void jbSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSiguienteActionPerformed
        if (this.month == 11){
            this.month = 0;
            this.year++;
        }else{
            this.month++;
        }
        this.updateDate();
        this.jtblVistaReservas.setModel(this.getTableModel());
    }//GEN-LAST:event_jbSiguienteActionPerformed

    private void cambiaColorCelda() {
        MiRender mr = new MiRender();
        
        for (int f = 0; f < jtblVistaReservas.getRowCount(); f++) {
            mr.getTableCellRendererComponent(
                    jtblVistaReservas, 
                    (String)jtblVistaReservas.getValueAt(
                        f, 
                        0
                    ), 
                    false, 
                    false, 
                    f, 
                    0
                    );
            jtblVistaReservas.setDefaultRenderer(Object.class, mr);
        }
        
        //jtblVistaReservas.setDefaultRenderer(Object.class, new MiRender(false));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Reservas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Reservas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Reservas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Reservas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new Reservas().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbAnterior;
    private javax.swing.JButton jbSiguiente;
    private javax.swing.JLabel jlblMesActual;
    private javax.swing.JMenuItem jmiAnula;
    private javax.swing.JMenuItem jmiCerrado;
    private javax.swing.JMenuItem jmiConfirma;
    private javax.swing.JMenuItem jmiReserva;
    private javax.swing.JPopupMenu jppmEstado;
    private javax.swing.JTable jtblVistaReservas;
    // End of variables declaration//GEN-END:variables

    private DefaultTableModel getTableModel() {
        Integer intUFcount = 30; //TODO obtener las unidades funcionales
        Integer intMaxDay = this.calendar.getActualMaximum(this.calendar.DAY_OF_MONTH);
        String [] columns = new String [intMaxDay + 1];
        columns[0] = "UF";
        for (Integer x = 1; x <= intMaxDay; x++){
            columns[x] = x.toString();
        }
        Object[][] object = new Object [intUFcount][intMaxDay];
        return new DefaultTableModel(object, columns);
    }
    
    private void updateDate(){
        this.calendar.set(this.year, this.month, this.calendar.get(GregorianCalendar.DATE));
        this.jlblMesActual.setText(this.getMesActual());
    }

    private String getMesActual() {
        NumberFormat formatter = NumberFormat.getInstance();
        formatter.setMinimumIntegerDigits(2);
        String strMonth = formatter.format(this.month + 1);
        String strYear = String.valueOf(this.year);
        return strMonth + "/" + strYear;
    }
}
