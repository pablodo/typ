/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package treintayplaya;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.table.*;

/**
 *
 * @author pablo
 */
public class CierreMovimientos extends javax.swing.JInternalFrame {

    /**
     * Creates new form mantenimientoBancos
     */
    public static java.sql.Connection cnx;
    private ArrayList<Integer> ids;
    private String[] headers = {"Fecha", 
								"Importe",
								"Importe con Descuentos",
                                "A favor de",
								"Cuenta",
								"Comisión",
								"Detalle"};
	private String[] totalesHeaders = {"En Comercializadora",
									   "No imputado",
									   "Sin comisión",
									   "Comisiones",
									   "En el Propietario",
									   "A Pagar",
									   "A Cobrar",
									   "Ganancia",
                                       "Expensas"};
	private String[] historicoHeaders = {"Fecha saldado", 
										 "En Comercializadora",
  									     "No imputado",
									     "Sin comisión",
									     "Comisiones",
									     "En el Propietario",
									     "A Pagar",
									     "A Cobrar",
									     "Ganancia",
									     "Expensas",
                                         "Liquidado"}; 
    private TotalMovimientos totales;
    
    public CierreMovimientos() {
        cnx = Conexion.getInstance().getConnection();
        initComponents();
        habilitarMovimientos(false);
        jtblMovimientos.setDefaultRenderer(Object.class, new RenderMovimientos());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")  
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbtnCerrar = new javax.swing.JButton();
        jpnlMovimientos = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblMovimientos = new javax.swing.JTable(){     public boolean isCellEditable(int row, int col){         return false;     } };
        lblMovimientos = new javax.swing.JLabel();
        jbtnSaldar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtblTotales = new javax.swing.JTable(){     public boolean isCellEditable(int row, int col){         return false;     } };
        jScrollPane3 = new javax.swing.JScrollPane();
        jtblHistorico = new javax.swing.JTable(){     public boolean isCellEditable(int row, int col){         return false;     } };
        lblHistorico = new javax.swing.JLabel();
        jftfImporteLiquidacion = new javax.swing.JFormattedTextField();
        jlblImporteLiquidacion = new javax.swing.JLabel();
        lblPropietario = new javax.swing.JLabel();
        jcbxPropietarios = new treintayplaya.ComboTabla();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Consulta de movimientos");

        jbtnCerrar.setMnemonic('C');
        jbtnCerrar.setText("Cerrar");
        jbtnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCerrarActionPerformed(evt);
            }
        });

        jpnlMovimientos.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jpnlMovimientos.setEnabled(false);

        jtblMovimientos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        jtblMovimientos.setGridColor(new java.awt.Color(204, 204, 204));
        jScrollPane1.setViewportView(jtblMovimientos);

        lblMovimientos.setText("Movimientos");

        jbtnSaldar.setMnemonic('L');
        jbtnSaldar.setText("Liquidar");
        jbtnSaldar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSaldarActionPerformed(evt);
            }
        });

        jtblTotales.setGridColor(new java.awt.Color(204, 204, 204));
        jScrollPane2.setViewportView(jtblTotales);

        jtblHistorico.setGridColor(new java.awt.Color(204, 204, 204));
        jScrollPane3.setViewportView(jtblHistorico);

        lblHistorico.setText("Histórico");

        jftfImporteLiquidacion.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##,###,##0.00"))));
        jftfImporteLiquidacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jftfImporteLiquidacionFocusLost(evt);
            }
        });

        jlblImporteLiquidacion.setText("Importe liquidación:");

        org.jdesktop.layout.GroupLayout jpnlMovimientosLayout = new org.jdesktop.layout.GroupLayout(jpnlMovimientos);
        jpnlMovimientos.setLayout(jpnlMovimientosLayout);
        jpnlMovimientosLayout.setHorizontalGroup(
            jpnlMovimientosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jpnlMovimientosLayout.createSequentialGroup()
                .addContainerGap()
                .add(jpnlMovimientosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 880, Short.MAX_VALUE)
                    .add(jScrollPane1)
                    .add(jScrollPane3)
                    .add(jpnlMovimientosLayout.createSequentialGroup()
                        .add(jpnlMovimientosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(lblHistorico)
                            .add(lblMovimientos))
                        .add(0, 0, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jpnlMovimientosLayout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(jlblImporteLiquidacion)
                        .add(18, 18, 18)
                        .add(jftfImporteLiquidacion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 181, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jbtnSaldar)))
                .addContainerGap())
        );
        jpnlMovimientosLayout.setVerticalGroup(
            jpnlMovimientosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jpnlMovimientosLayout.createSequentialGroup()
                .addContainerGap()
                .add(lblHistorico)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 95, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(lblMovimientos)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 181, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 51, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jpnlMovimientosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jbtnSaldar)
                    .add(jftfImporteLiquidacion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jlblImporteLiquidacion))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblPropietario.setText("Propietario:");

        Funciones.cargarComboTablaApellidoNombre((ComboTabla)jcbxPropietarios, "SELECT * FROM Propietarios WHERE propUF > 0 ORDER BY propApellido", "propApellido", "propNombre", "propID");
        jcbxPropietarios.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbxPropietariosItemStateChanged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(jbtnCerrar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 117, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(lblPropietario)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jcbxPropietarios, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 326, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(jpnlMovimientos, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblPropietario)
                    .add(jcbxPropietarios, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jpnlMovimientos, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jbtnCerrar)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCerrarActionPerformed
        dispose();
    }//GEN-LAST:event_jbtnCerrarActionPerformed

    private void jbtnSaldarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSaldarActionPerformed
        int propID = ((ComboTabla)jcbxPropietarios).getSelectedId();
        double importe = Double.valueOf(String.valueOf(jftfImporteLiquidacion.getValue()));
        try {
            cnx.setAutoCommit(false);
            insertLiquidacion(propID, importe);
            int liquidacion = getUltimaLiquidacion();
            updateMovimientos(liquidacion);
            cnx.commit();
        } catch (SQLException ex) {
            try {
                cnx.rollback();
            } catch (SQLException ex1) {}
            Logger.getLogger(CierreMovimientos.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                cnx.setAutoCommit(true);
            } catch (SQLException ex) {
                Logger.getLogger(CierreMovimientos.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        habilitarMovimientos(false);
		jtblHistorico.setModel(new DefaultTableModel());
        jcbxPropietarios.setSelectedIndex(-1);
        jcbxPropietarios.requestFocus();
    }//GEN-LAST:event_jbtnSaldarActionPerformed

	private void jcbxPropietariosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbxPropietariosItemStateChanged
        jlblImporteLiquidacion.setText("Importe liquidación:");
        if (jcbxPropietarios.getSelectedIndex() < 0){
            return;
        }
		int propID = ((ComboTabla)jcbxPropietarios).getSelectedId();
		if (propID > 0){
			cargaLiquidaciones(propID);
			cargaMovimientos(propID);
			habilitarMovimientos(jtblMovimientos.getRowCount() > 0);
		}else{
			habilitarMovimientos(false);
		}
	}//GEN-LAST:event_jcbxPropietariosItemStateChanged

    private void jftfImporteLiquidacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jftfImporteLiquidacionFocusLost
        try {
            jftfImporteLiquidacion.commitEdit();
        } catch (ParseException ex) {
            Logger.getLogger(CierreMovimientos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jftfImporteLiquidacionFocusLost

    public void cargaLiquidaciones(int propID){
		DefaultTableModel modelo;
        try {
            String query = "SELECT * FROM Liquidaciones "
                         + "WHERE liqPropietario = ?";
            java.sql.PreparedStatement pstm = cnx.prepareStatement(query);
            modelo = limpiarTabla(jtblHistorico, historicoHeaders);
            pstm.setInt(1, propID);
            java.sql.ResultSet rst = pstm.executeQuery();
            while (rst.next()){
                Object[] row = {
                    FechasFormatter.getFechaFromMySQL(rst.getString("liqFecha")),
                    Funciones.formatNumber(rst.getDouble("liqEnComercializadora")),
                    Funciones.formatNumber(rst.getDouble("liqNoImputado")),
                    Funciones.formatNumber(rst.getDouble("liqSinComision")),
                    Funciones.formatNumber(rst.getDouble("liqComisiones")),
                    Funciones.formatNumber(rst.getDouble("liqEnPropietario")),
                    Funciones.formatNumber(rst.getDouble("liqAPagar")),
                    Funciones.formatNumber(rst.getDouble("liqACobrar")),
                    Funciones.formatNumber(rst.getDouble("liqGanancia")),
                    Funciones.formatNumber(rst.getDouble("liqExpensas")),
                    Funciones.formatNumber(rst.getDouble("liqImporte"))
                };
                modelo.addRow(row);
            }
        } catch (SQLException ex) {
            Logger.getLogger(CierreMovimientos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

	public void cargaMovimientos(int propID) {
		DefaultTableModel modelo;
        try {
			String query = "SELECT alqID, ufID, alqUF, alqCuentaImpPropID, " +
                    "p1.propID, p2.propID, alqEstado, movLiquidacion, movAlqID, " +
                    "movID, movDestino, movImporte, ufPrecio, alqImporteSinComision, " +
                    "alqDifImputacion, alqTotal, movFecha, p1.propNCuenta, movDetalle " +
                    "FROM Movimientos " +
					"INNER JOIN Alquileres ON movAlqID = alqID " +
					"INNER JOIN UnidadesFuncionales ON alqUF = ufID " +
					"LEFT JOIN Propietarios as p1 ON alqCuentaImpPropID = p1.propID " +
					"LEFT JOIN Propietarios as p2 ON alqUF = p2.propUF " +
					"WHERE (p1.propID = ? OR p2.propID = ?) AND alqEstado = 2 AND movLiquidacion = 0 AND movAlqID != 0 " +
                    "GROUP BY movID ORDER BY alqID, movFecha DESC";
            ids = new ArrayList<Integer>();
            modelo = limpiarTabla(jtblMovimientos, headers);
            java.sql.PreparedStatement pstm = cnx.prepareStatement(query);
			pstm.setInt(1, propID);
			pstm.setInt(2, propID);
            java.sql.ResultSet rst = pstm.executeQuery();
            totales = new TotalMovimientos();
			Importe importe = new Importe();
			int alqIDAnt = 0;

			while(rst.next()) {
                int movPropID = rst.getInt("alqCuentaImpPropID");

                if (movPropID > 0 && movPropID != propID){
                    //Si tiene una cuenta de deposito, y no es la del propietario actual, que siga de largo
                    continue;
                }

				int alqID = rst.getInt("alqID");
				int destino = rst.getInt("movDestino");
				importe.setImporte(rst.getDouble("movImporte"));
				importe.porcentajeComision = rst.getDouble("ufPrecio");
				if (alqID != alqIDAnt){
					alqIDAnt = alqID;
					importe.sinComision = rst.getDouble("alqImporteSinComision");
					importe.diferenciaImputacion = rst.getDouble("alqDifImputacion");
					totales.sinComision += importe.sinComision;
					totales.noImputado += importe.diferenciaImputacion;
                    String[] row = {"Alquiler " + String.valueOf(alqID),
                                    "Total: " + Funciones.formatNumber(rst.getDouble("alqTotal")),
                                    "No imputado: " + importe.getDiferenciaImputacion(),
                                    "Sin comisión: " + importe.getSinComision(),
                                    "Comision(%): " + Funciones.formatNumber(importe.porcentajeComision, "#0.00")
                                    };
                    modelo.addRow(row);
                    ids.add(0);
				}
				importe.actualizar();
				//Movimientos
				totales.comisiones += importe.comision;
                ids.add(rst.getInt("movID"));
                Object [] fila = {FechasFormatter.getFechaFromMySQL(rst.getString("movFecha")),
                                  importe.getImporte(),
                                  importe.getImporteConDescuentos(),
                                  Movimientos.destinos[destino],
                                  rst.getString("p1.propNCuenta"),
                                  importe.getComision(),
                                  rst.getString("movDetalle")};
                modelo.addRow(fila);
				if (destino == 1)
					totales.comercializadora += importe.importe;
				if (destino == 2)
					totales.propietario += importe.importe;
			}
            rst.close();
            pstm.close();
            
            //Expensas
            query = "SELECT movID, movImporte, movDestino, movDetalle, movFecha " +
                    "FROM Movimientos " +
                    "WHERE movPropietario = ? AND movLiquidacion = 0 AND movOperacion = -1"; //Operacion -1 = Expensas 
            pstm = cnx.prepareStatement(query);
            pstm.setInt(1, propID);
            rst = pstm.executeQuery();
            while (rst.next()){
                if (rst.isFirst()){
                    modelo.addRow(new Object[]{"Expensas"});
                }
                ids.add(rst.getInt("movID"));
                Double importeExpensas = rst.getDouble("movImporte");
                Object [] fila = {FechasFormatter.getFechaFromMySQL(rst.getString("movFecha")),
                                  Funciones.formatNumber(importeExpensas)};
                modelo.addRow(fila);
                totales.expensas += importeExpensas;
            }
            totales.calcularTotales();
            jtblTotales.setModel(new DefaultTableModel(new Object[][]{totales.toRow()}, totalesHeaders)); 

            rst.close();
            pstm.close();
        } catch (java.sql.SQLException sqle) {
            sqle.printStackTrace();
        }
    }
    
    private void habilitarMovimientos(boolean option){
        jtblMovimientos.setEnabled(option);
		jtblTotales.setEnabled(option);
		jbtnSaldar.setEnabled(option);
        if (! option){
            jtblMovimientos.setModel(new DefaultTableModel());
            jtblTotales.setModel(new DefaultTableModel());
			jftfImporteLiquidacion.setValue(0);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton jbtnCerrar;
    private javax.swing.JButton jbtnSaldar;
    private javax.swing.JComboBox jcbxPropietarios;
    private javax.swing.JFormattedTextField jftfImporteLiquidacion;
    private javax.swing.JLabel jlblImporteLiquidacion;
    private javax.swing.JPanel jpnlMovimientos;
    private javax.swing.JTable jtblHistorico;
    private javax.swing.JTable jtblMovimientos;
    private javax.swing.JTable jtblTotales;
    private javax.swing.JLabel lblHistorico;
    private javax.swing.JLabel lblMovimientos;
    private javax.swing.JLabel lblPropietario;
    // End of variables declaration//GEN-END:variables

    private boolean valida() {
        return true;
    }

	private DefaultTableModel limpiarTabla(JTable tabla, String[] headers) {
		DefaultTableModel modelo = new DefaultTableModel();
		tabla.setModel(modelo);
		modelo.setColumnIdentifiers(headers);
		return modelo;
	}

    private class RenderMovimientos extends DefaultTableCellRenderer implements TableCellRenderer {
         
        @Override
        public Component getTableCellRendererComponent(JTable table,
                                                       Object value, 
                                                       boolean isSelected,
                                                       boolean hasFocus,
                                                       int row, 
                                                       int column) {
            
                setEnabled(table == null || table.isEnabled());
                TableColumnModel tcm = table.getColumnModel();
                TableColumn columnaCero = tcm.getColumn(0);
                columnaCero.setPreferredWidth(150);
                
                Object rowValue = table.getValueAt(row, 0);
                if (rowValue != null){
                    Font font = table.getFont();
                    if (rowValue.toString().startsWith("Alquiler")){
                        setBackground(new Color(100, 255,100));
                        font = font.deriveFont(Font.BOLD);
                    }else if(rowValue.toString().startsWith("Expensas")){
                        setBackground(new Color(100, 200,100));
                        font = font.deriveFont(Font.BOLD);
                    }else{
                        setBackground(Color.WHITE);
                        font = font.deriveFont(Font.PLAIN);
                    }
                    table.setFont(font);
                }
                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);         
                
                return this;
        }
    }

	private class TotalMovimientos{
		public double comercializadora = 0.0;
		public double propietario = 0.0;
		public double comisiones = 0.0;
		public double noImputado = 0.0;
		public double sinComision = 0.0;
		public double aPagar = 0.0;
		public double aCobrar = 0.0;
		public double ganancia = 0.0;
        public double expensas = 0.0;
		public String fechaSaldado = "";

		public String getComercializadora(){
			return Funciones.formatNumber(comercializadora);
		}
		public String getPropietario(){
			return Funciones.formatNumber(propietario);
		}
		public String getComisiones(){
			return Funciones.formatNumber(comisiones);
		}
		public String getNoImputado(){
			return Funciones.formatNumber(noImputado);
		}
		public String getSinComision(){
			return Funciones.formatNumber(sinComision);
		}
		public String getAPagar(){
			return Funciones.formatNumber(aPagar);
		}
		public String getACobrar(){
			return Funciones.formatNumber(aCobrar);
		}
		public String getGanancia(){
			return Funciones.formatNumber(ganancia);
		}
		public String getExpensas(){
			return Funciones.formatNumber(expensas);
		}
		public void calcularTotales(){
			ganancia = comisiones + noImputado;
			aCobrar = comisiones - comercializadora + expensas;
			if (aCobrar < 0) aCobrar = 0.0;
			aPagar = comercializadora - comisiones - noImputado - expensas;
			if (aPagar < 0) aPagar = 0.0;
            if (aPagar > aCobrar){
                jlblImporteLiquidacion.setText("Pagar");
                jftfImporteLiquidacion.setValue(aPagar - aCobrar);
            }else if(aCobrar > aPagar){
                jlblImporteLiquidacion.setText("Cobrar");
                jftfImporteLiquidacion.setValue(aCobrar - aPagar);
            } else {
                jftfImporteLiquidacion.setValue(0);
            }
		}
		public Object[] toRow() {
			ArrayList list = new ArrayList();
			if (! fechaSaldado.equals(""))
				list.add(fechaSaldado);
			list.add(getComercializadora());
			list.add(getNoImputado());
			list.add(getSinComision());
			list.add(getComisiones());
			list.add(getPropietario());
			list.add(getAPagar());
			list.add(getACobrar());
			list.add(getGanancia());
			list.add(getExpensas());
			return list.toArray();
		}
	}

	private class Importe{
		public double importe = 0.0;
		public double sinComision = 0.0;
		public double conDescuentos = 0.0;
		public double diferenciaImputacion = 0.0;
		public double comision = 0.0;
		public double porcentajeComision = 0.0;

		public void actualizar() {
			//Saco la imputacion a los movimientos
			if (diferenciaImputacion > 0){
				if (conDescuentos >= diferenciaImputacion){
					conDescuentos -= diferenciaImputacion;
					diferenciaImputacion = 0.0;
				}else{
					conDescuentos = 0.0;
					diferenciaImputacion -= conDescuentos;
				}
			}
			//Saco el importe sin comision
			if (sinComision > 0){
				if (conDescuentos >= sinComision){
					conDescuentos -= sinComision;
					sinComision = 0.0;
				}else{
					conDescuentos = 0.0;
					sinComision -= conDescuentos;
				}
			}
			comision = conDescuentos / 100 * porcentajeComision;
		}

		public void setImporte(Double importe){
			this.importe = importe;
			this.conDescuentos = importe;
		}
		public String getDiferenciaImputacion() {
			return Funciones.formatNumber(diferenciaImputacion);
		}
		public String getSinComision() {
			return Funciones.formatNumber(sinComision);
		}
		private String getImporte() {
			return Funciones.formatNumber(importe);
		}
		private String getImporteConDescuentos() {
			return Funciones.formatNumber(conDescuentos);
		}
		private String getComision(){
			return Funciones.formatNumber(comision);
		}
	}

    private int insertLiquidacion(int propID, Double importe) throws SQLException{
        String query = "INSERT INTO Liquidaciones (liqFecha, liqPropietario, liqImporte, "
                + "liqACobrar, liqAPagar, liqNoImputado, liqSinComision, liqComisiones, "
                + "liqGanancia, liqExpensas, liqEnComercializadora, liqEnPropietario) "
                + "VALUES (NOW(), ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        java.sql.PreparedStatement pstm = cnx.prepareStatement(query);
        pstm.setDouble(1, propID);
        pstm.setDouble(2, importe);
        pstm.setDouble(3, totales.aCobrar);
        pstm.setDouble(4, totales.aPagar);
        pstm.setDouble(5, totales.noImputado);
        pstm.setDouble(6, totales.sinComision);
        pstm.setDouble(7, totales.comisiones);
        pstm.setDouble(8, totales.ganancia);
        pstm.setDouble(9, totales.expensas);
        pstm.setDouble(10, totales.comercializadora);
        pstm.setDouble(11, totales.propietario);
        return pstm.executeUpdate();
    }

    private int getUltimaLiquidacion() throws SQLException {
        String query = "SELECT LAST_INSERT_ID() as id FROM Liquidaciones LIMIT 1";
        java.sql.Statement st  = cnx.createStatement();
        java.sql.ResultSet rst = st.executeQuery(query);
        rst.next();
        int id = rst.getInt("id");
        rst.close();
        st.close();
        return id;
    }

    private int updateMovimientos(int liquidacion) throws SQLException{
        String where = " WHERE";
        for (Integer id: ids){
            if(id > 0){
                where += " movID=" + String.valueOf(id);
                if (ids.indexOf(id) < ids.size()-1){
                    where += " OR";
                }
            }
        }
        String query = "UPDATE Movimientos SET movLiquidacion=?" + where;
        java.sql.PreparedStatement pstm = cnx.prepareStatement(query);
        pstm.setInt   (1, liquidacion);
        return pstm.executeUpdate();
    }

}
