/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package treintayplaya;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.table.*;

/**
 *
 * @author sergio
 */
public class CierreMovimientos extends javax.swing.JInternalFrame {

    /**
     * Creates new form mantenimientoBancos
     */
    public static javax.swing.table.DefaultTableModel modelo;
    public static java.sql.Connection cnx;
    private ArrayList<Integer> ids;
    private Object[] headers = {"Fecha", 
								"Importe",
								"Importe con Descuentos",
                                "A favor de",
								"Cuenta",
								"Comisión",
								"Detalle"};
	private String[] totalesHeaders = {"En Comercializadora",
									   "No imputado",
									   "Sin comisión",
									   "Comisiones",
									   "En el Propietario",
									   "A Pagar",
									   "A Cobrar",
									   "Ganancia"};
    
    public CierreMovimientos() {
        modelo = new javax.swing.table.DefaultTableModel();
        cnx = Conexion.getInstance().getConnection();
        initComponents();
        habilitarMovimientos(false);
        jtblMovimientos.setDefaultRenderer(Object.class, new RenderMovimientos());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")  
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbtnCerrar = new javax.swing.JButton();
        jpnlMovimientos = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblMovimientos = new javax.swing.JTable(){     public boolean isCellEditable(int row, int col){         return false;     } };
        lblMovimientos = new javax.swing.JLabel();
        jbtnSaldar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtblTotales = new javax.swing.JTable(){     public boolean isCellEditable(int row, int col){         return false;     } };
        lblPropietario = new javax.swing.JLabel();
        jcbxPropietarios = new treintayplaya.ComboTabla();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Consulta de movimientos");

        jbtnCerrar.setMnemonic('C');
        jbtnCerrar.setText("Cerrar");
        jbtnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCerrarActionPerformed(evt);
            }
        });

        jpnlMovimientos.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jpnlMovimientos.setEnabled(false);

        jtblMovimientos.setModel(modelo);
        jtblMovimientos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        jtblMovimientos.setGridColor(new java.awt.Color(204, 204, 204));
        jScrollPane1.setViewportView(jtblMovimientos);

        lblMovimientos.setText("Movimientos");

        jbtnSaldar.setMnemonic('S');
        jbtnSaldar.setText("Saldar movimientos");
        jbtnSaldar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSaldarActionPerformed(evt);
            }
        });

        jtblTotales.setGridColor(new java.awt.Color(204, 204, 204));
        jScrollPane2.setViewportView(jtblTotales);

        org.jdesktop.layout.GroupLayout jpnlMovimientosLayout = new org.jdesktop.layout.GroupLayout(jpnlMovimientos);
        jpnlMovimientos.setLayout(jpnlMovimientosLayout);
        jpnlMovimientosLayout.setHorizontalGroup(
            jpnlMovimientosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jpnlMovimientosLayout.createSequentialGroup()
                .addContainerGap()
                .add(jpnlMovimientosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jpnlMovimientosLayout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(jbtnSaldar))
                    .add(jpnlMovimientosLayout.createSequentialGroup()
                        .add(lblMovimientos)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 888, Short.MAX_VALUE)
                    .add(jScrollPane1))
                .addContainerGap())
        );
        jpnlMovimientosLayout.setVerticalGroup(
            jpnlMovimientosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jpnlMovimientosLayout.createSequentialGroup()
                .addContainerGap()
                .add(lblMovimientos)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 212, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                .add(12, 12, 12)
                .add(jbtnSaldar)
                .add(6, 6, 6))
        );

        lblPropietario.setText("Propietario:");

        Funciones.cargarComboTablaApellidoNombre((ComboTabla)jcbxPropietarios, "SELECT * FROM Propietarios ORDER BY propApellido", "propApellido", "propNombre", "propID");
        jcbxPropietarios.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbxPropietariosItemStateChanged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(jbtnCerrar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 117, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(lblPropietario)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jcbxPropietarios, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 326, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(jpnlMovimientos, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblPropietario)
                    .add(jcbxPropietarios, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jpnlMovimientos, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jbtnCerrar)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCerrarActionPerformed
        dispose();
    }//GEN-LAST:event_jbtnCerrarActionPerformed

    private void jbtnSaldarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSaldarActionPerformed
        String where = " WHERE";
        for (Integer id: ids){
            if(id > 0){
                where += " movID=" + String.valueOf(id);
                if (ids.indexOf(id) < ids.size()-1){
                    where += " OR";
                }
            }
        }
        String query = "UPDATE Movimientos SET movSaldado=1, movFechaSaldado=?" + where;
        try {
            java.sql.PreparedStatement pstm = cnx.prepareStatement(query);
            pstm.setString(1, FechasFormatter.getFechaString(new GregorianCalendar()));
            int result = pstm.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(CierreMovimientos.class.getName()).log(Level.SEVERE, null, ex);
        }
        habilitarMovimientos(false);
        jcbxPropietarios.setSelectedIndex(-1);
        jcbxPropietarios.requestFocus();
    }//GEN-LAST:event_jbtnSaldarActionPerformed

	private void jcbxPropietariosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbxPropietariosItemStateChanged
        if (jcbxPropietarios.getSelectedIndex() < 0){
            return;
        }
		int propID = ((ComboTabla)jcbxPropietarios).getSelectedId();
		if (propID > 0){
			cargaTabla(propID);
			habilitarMovimientos(jtblMovimientos.getRowCount() > 0);
		}else{
			habilitarMovimientos(false);
		}
	}//GEN-LAST:event_jcbxPropietariosItemStateChanged
public void cargaTabla(int propID) {
        try {
			String query = "SELECT * FROM Movimientos "+
					"INNER JOIN Alquileres ON movAlqID = alqID "+
					"INNER JOIN Propietarios ON alqCuentaImpPropID = propID "+
					"INNER JOIN UnidadesFuncionales ON alqUF = ufID "+
					"WHERE movSaldado = 0 AND movAlqID != 0 AND propID = ? "+
					"ORDER BY alqID, movFecha DESC";
            java.sql.PreparedStatement pstm = cnx.prepareStatement(query);
			pstm.setInt(1, propID);
            java.sql.ResultSet rst = pstm.executeQuery();
            
            ids = new ArrayList<Integer>();
            modelo = new javax.swing.table.DefaultTableModel();
            jtblMovimientos.setModel(modelo);
            modelo.setColumnIdentifiers(headers);
			jtblTotales.removeAll();
			Double dblComercializadora = 0.0;
			Double dblPropietario = 0.0;
			Double dblDiferenciaImputado = 0.0;
			Double dblComisiones = 0.0;
			int alqIDAnt = 0;
            Double importeImputado = 0.0;
            Double importeSinComision = 0.0;
            Double dblSinComision = 0.0;
            while(rst.next()) {
				//Ordenado por alquileres
				int alqID = rst.getInt("alqID");
				Double porcentajeComision = rst.getDouble("ufPrecio");
				Double importe = rst.getDouble("movImporte"); 
                Double importeConDescuentos = importe;
				if (alqID != alqIDAnt){
					alqIDAnt = alqID;
					importeSinComision = rst.getDouble("alqImporteSinComision");
					importeImputado = rst.getDouble("alqDifImputacion");
                    dblSinComision += importeSinComision;
					dblDiferenciaImputado += importeImputado;
					String[] row = {"Alquiler " + String.valueOf(alqID),
								    "Total: " + Funciones.formatNumber(rst.getDouble("alqTotal")),
									"No imputado: " + Funciones.formatNumber(importeImputado),
									"Sin comisión: " + Funciones.formatNumber(importeSinComision),
								    "Comision(%): " + Funciones.formatNumber(porcentajeComision, "#0.00")
                                    };
					modelo.addRow(row);
					ids.add(0);
				}
                
                //Saco la imputacion a los movimientos
                if (importeImputado > 0){
                    if (importeConDescuentos >= importeImputado){
                        importeConDescuentos -= importeImputado;
                        importeImputado = 0.0;
                    }else{
                        importeConDescuentos = 0.0;
                        importeImputado -= importeConDescuentos;
                    }
                }
                //Saco el importe sin comision
                if (importeSinComision > 0){
                    if (importeConDescuentos >= importeSinComision){
                        importeConDescuentos -= importeSinComision;
                        importeSinComision = 0.0;
                    }else{
                        importeConDescuentos = 0.0;
                        importeSinComision -= importeConDescuentos;
                    }
                }
				//Movimientos
                ids.add(rst.getInt("movID"));
				int destino = rst.getInt("movDestino");
                Double comision = importeConDescuentos / 100 * porcentajeComision;
                dblComisiones += comision;
                Object [] fila = {FechasFormatter.getFechaFromMySQL(rst.getString("movFecha")),
								  Funciones.formatNumber(importe),
								  Funciones.formatNumber(importeConDescuentos),
                                  Movimientos.destinos[destino],
								  rst.getString("propNCuenta"),
								  Funciones.formatNumber(comision),
								  rst.getString("movDetalle")};
                modelo.addRow(fila);

				//Acumulo totales
				if (destino == 1)
					dblComercializadora += importe;
				if (destino == 2)
					dblPropietario += importe;
            }
			//Totales
			Double ganancia = dblComisiones + dblDiferenciaImputado;
			Double aCobrar = dblComisiones - dblComercializadora;
			if (aCobrar < 0) aCobrar = 0.0;
			Double aPagar = dblComercializadora - dblComisiones - dblDiferenciaImputado;
			if (aPagar < 0) aPagar = 0.0;
	 		Object[][] totales = {{Funciones.formatNumber(dblComercializadora),
								   Funciones.formatNumber(dblDiferenciaImputado),
								   Funciones.formatNumber(dblSinComision),
								   Funciones.formatNumber(dblComisiones),
								   Funciones.formatNumber(dblPropietario),
								   Funciones.formatNumber(aPagar),
								   Funciones.formatNumber(aCobrar),
								   Funciones.formatNumber(ganancia)}};
           	jtblTotales.setModel(new DefaultTableModel(totales, totalesHeaders)); 
            rst.close();
            pstm.close();
        } catch (java.sql.SQLException sqle) {
            sqle.printStackTrace();
        }
    }
    
    private void habilitarMovimientos(boolean option){
        jtblMovimientos.setEnabled(option);
		jtblTotales.setEnabled(option);
		jbtnSaldar.setEnabled(option);
        if (! option){
            jtblMovimientos.setModel(new DefaultTableModel());
            jtblTotales.setModel(new DefaultTableModel());
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbtnCerrar;
    private javax.swing.JButton jbtnSaldar;
    private javax.swing.JComboBox jcbxPropietarios;
    private javax.swing.JPanel jpnlMovimientos;
    private javax.swing.JTable jtblMovimientos;
    private javax.swing.JTable jtblTotales;
    private javax.swing.JLabel lblMovimientos;
    private javax.swing.JLabel lblPropietario;
    // End of variables declaration//GEN-END:variables

    private boolean valida() {
        return true;
    }

    private class RenderMovimientos extends DefaultTableCellRenderer implements TableCellRenderer {
         
        @Override
        public Component getTableCellRendererComponent(JTable table,
                                                       Object value, 
                                                       boolean isSelected,
                                                       boolean hasFocus,
                                                       int row, 
                                                       int column) {
            
                setEnabled(table == null || table.isEnabled());
                TableColumnModel tcm = table.getColumnModel();
                TableColumn columnaCero = tcm.getColumn(0);
                columnaCero.setPreferredWidth(100);
                
                Object rowValue = table.getValueAt(row, 0);
                if (rowValue != null){
                    Font font = table.getFont();
                    if (rowValue.toString().startsWith("Alquiler")){
                        setBackground(new Color(100, 255,100));
                        font = font.deriveFont(Font.BOLD);
                    }else{
                        setBackground(Color.WHITE);
                        font = font.deriveFont(Font.PLAIN);
                    }
                    table.setFont(font);
                }
                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);         
                
                return this;
        }
    }
}
