/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package treintayplaya;

import java.sql.SQLException;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Pablo
 */
public class ListadoAlquileres extends javax.swing.JInternalFrame {
    final static int DEUDORES=0;
    final static int ENTRANTES=1;
    java.sql.Connection cnx;
    javax.swing.table.DefaultTableModel modelo;
    Integer listado;
    Alquiler[] alquileres;
    
    /** Creates new form ListadoAlquileres */
    public ListadoAlquileres(Integer listado) {
        cnx = Conexion.getInstance().getConnection();
        modelo = new javax.swing.table.DefaultTableModel();
        this.listado = listado;
        initComponents();
        getRootPane().setDefaultButton(listar);
        listar();
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menu = new javax.swing.JPopupMenu();
        enviarMail = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable(){     public boolean isCellEditable(int row, int col){         return false;     } };
        jPanel1 = new javax.swing.JPanel();
        fechaDesde = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        fechaHasta = new com.toedter.calendar.JDateChooser();
        cerrar = new javax.swing.JButton();
        listar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jcbxTipoAlquiler = new javax.swing.JComboBox();

        menu.setComponentPopupMenu(menu);

        enviarMail.setMnemonic('E');
        enviarMail.setText("Enviar e-mail");
        enviarMail.setToolTipText("");
        enviarMail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enviarMailActionPerformed(evt);
            }
        });
        menu.add(enviarMail);

        menu.getAccessibleContext().setAccessibleParent(tabla);

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle(armarTitulo());

        tabla.setModel(modelo);
        tabla.setComponentPopupMenu(menu);
        jScrollPane1.setViewportView(tabla);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, getFechasTitle(), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(255, 0, 0))); // NOI18N

        fechaDesde.setCalendar(new GregorianCalendar());

        jLabel1.setText("a");

        fechaHasta.setCalendar(FechasFormatter.getMaxToday());

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(fechaDesde, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(fechaHasta, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 160, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(jLabel1)
                    .add(fechaHasta, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(fechaDesde, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        cerrar.setMnemonic('C');
        cerrar.setText("Cerrar");
        cerrar.setToolTipText("");
        cerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cerrarActionPerformed(evt);
            }
        });

        listar.setMnemonic('L');
        listar.setText("Listar");
        listar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listarActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Estado del Alquiler", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), java.awt.Color.red)); // NOI18N

        jcbxTipoAlquiler.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todos", "Reserva provisoria", "Reserva confirmada", "Reserva cancelada" }));

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jcbxTipoAlquiler, 0, 234, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jcbxTipoAlquiler, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(listar)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(cerrar))
                    .add(layout.createSequentialGroup()
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 817, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 367, Short.MAX_VALUE)
                .add(6, 6, 6)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(listar)
                    .add(cerrar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void enviarMailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enviarMailActionPerformed
        Alquiler[] selectedAlquileres = new Alquiler[alquileres.length];
        for (int i = 0; i < tabla.getRowCount(); i++){
            if (tabla.isCellSelected(i, 0)){
                selectedAlquileres[i] = alquileres[i];
            }
        }
        new DialogMailSender(selectedAlquileres).setVisible(true);
    }//GEN-LAST:event_enviarMailActionPerformed

    private void cerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cerrarActionPerformed
        dispose();
    }//GEN-LAST:event_cerrarActionPerformed

    private void listarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listarActionPerformed
       if(fechaDesde.getCalendar().getTimeInMillis() > fechaHasta.getCalendar().getTimeInMillis()){
            JOptionPane.showMessageDialog(this, "Por favor, seleccione una fecha correcta.", "Fecha inválida", JOptionPane.ERROR_MESSAGE);
            fechaHasta.requestFocus();
            tabla.setEnabled(false);
        }else{
            tabla.setEnabled(true);
            listar();
        }
    }//GEN-LAST:event_listarActionPerformed
    
    private void listarDeudores(){
        try {
            String query = "SELECT *, (alqTotal - alqImporteReserva) as Saldo FROM Alquileres, Clientes, UnidadesFuncionales WHERE alqCliente = cliID AND alqUF = ufID AND CAST(alqFecha AS DATE) >= ? AND CAST(alqFecha AS DATE) <= ? AND (alqTotal - alqImporteReserva) != 0";
			if (jcbxTipoAlquiler.getSelectedIndex() > 0){
				query += " AND alqEstado = " + String.valueOf(jcbxTipoAlquiler.getSelectedIndex() - 1);
			}
            java.sql.PreparedStatement pstm = cnx.prepareStatement(query);
            pstm.setString(1, FechasFormatter.getFechaSimpleString(fechaDesde.getCalendar()));
            pstm.setString(2, FechasFormatter.getFechaSimpleString(fechaHasta.getCalendar()));
            java.sql.ResultSet rst = pstm.executeQuery();
            
            modelo = new javax.swing.table.DefaultTableModel();
            Object[] headers = {"Apellido", "Nombre", 
                                "Unidad Funcional", "Fecha Reserva", 
                                "Fecha de Ingreso", "Fecha de Egreso", 
                                "Saldo", "E-mail", "Teléfono",
                                "Celular"};
            modelo.setColumnIdentifiers(headers);
            tabla.setModel(modelo);
            rst.last();
            alquileres = new Alquiler[rst.getRow()];
            rst.beforeFirst();
            while (rst.next()){
                alquileres[rst.getRow()-1] = new Alquiler(rst.getInt("alqID"));
                Object[] fila = {rst.getString("cliApellido"),
                                 rst.getString("cliNombre"),
                                 rst.getString("ufNombre"),
                                 FechasFormatter.getFechaSimpleString(rst.getString("alqFecha")),
                                 FechasFormatter.getFechaSimpleString(rst.getString("alqFIN")),
                                 FechasFormatter.getFechaSimpleString(rst.getString("alqFOUT")),
                                 rst.getDouble("Saldo"),
                                 rst.getString("cliEmail"),
                                 rst.getString("cliTelefono"),
                                 rst.getString("cliCelular")};
                modelo.addRow(fila);
            }
            rst.close();
            pstm.close();
        } catch (SQLException ex) {
            Logger.getLogger(ListadoAlquileres.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void listarEntrantes(){
        try {
            String query = "SELECT * FROM Alquileres, Clientes, UnidadesFuncionales " +
					       "WHERE alqCliente = cliID AND alqUF = ufID AND CAST(alqFIN AS DATE) >= ? AND CAST(alqFIN AS DATE) <= ?";
			if (jcbxTipoAlquiler.getSelectedIndex() > 0){
				query += " AND alqEstado = " + String.valueOf(jcbxTipoAlquiler.getSelectedIndex() - 1);
			}
            java.sql.PreparedStatement pstm = cnx.prepareStatement(query);
            pstm.setString(1, FechasFormatter.getFechaSimpleString(fechaDesde.getCalendar()));
            pstm.setString(2, FechasFormatter.getFechaSimpleString(fechaHasta.getCalendar()));
            java.sql.ResultSet rst = pstm.executeQuery();
            
            modelo = new javax.swing.table.DefaultTableModel();
            Object[] headers = {"Ingreso", "UF", "Apellido", "Nombre", "A", "M", "B", "D", "Observaciones"}; 
            modelo.setColumnIdentifiers(headers);
            tabla.setModel(modelo);
            rst.last();
            alquileres = new Alquiler[rst.getRow()];
            rst.beforeFirst();
            while (rst.next()){
                alquileres[rst.getRow()-1] = new Alquiler(rst.getInt("alqID"));
                Object[] fila = {FechasFormatter.getFechaSimpleString(rst.getString("alqFIN")),
                                 rst.getString("ufNombre"),
                                 rst.getString("cliApellido"),
                                 rst.getString("cliNombre"),
                                 rst.getString("alqOcupantesA"),
                                 rst.getString("alqOcupantesM"),
                                 rst.getString("alqOcupantesB"),
                                 rst.getString("alqDesayunos"),
                                 rst.getString("alqObservaciones"),
				};
                modelo.addRow(fila);
            }
            rst.close();
            pstm.close();
        } catch (SQLException ex) {
            Logger.getLogger(ListadoAlquileres.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cerrar;
    private javax.swing.JMenuItem enviarMail;
    private com.toedter.calendar.JDateChooser fechaDesde;
    private com.toedter.calendar.JDateChooser fechaHasta;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox jcbxTipoAlquiler;
    private javax.swing.JButton listar;
    private javax.swing.JPopupMenu menu;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables

    private String armarTitulo() {
        String titulo = "";
        switch(listado){
            case DEUDORES:
                titulo = "Listado de inquilinos deudores";
                break;
            case ENTRANTES:
                titulo = "Listado de inquilinos entrantes";
                break;
        }
        return titulo;
    }

    private void listar() {
        switch(listado){
            case DEUDORES:
                listarDeudores();
                break;
            case ENTRANTES:
                listarEntrantes();
                break;
        }
    }

	private String getFechasTitle(){
		switch(listado){
			case DEUDORES:
				return "Fechas";
			case ENTRANTES:
				return "Fechas de ingreso";
		}
		return "Fechas";
	}

}
