/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AltaAlquiler.java
 *
 * Created on 12-oct-2011, 4:23:13
 */
package treintayplaya;

import java.awt.Color;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author sergio
 */
public class AltaAlquiler extends javax.swing.JInternalFrame {

    /** Creates new form AltaAlquiler */
    java.sql.Connection cnx;
    VistaActividadAdmin tabla;
    GregorianCalendar fechaActual;
    Thread fechas;
    private Alquiler alquiler;
    private Integer operacion;
    String[] titulos = {"Reserva Provisoria", "Confirmar Reserva", "Cancelar Reserva", "Modificar Alquiler"};
    
    
    public AltaAlquiler(VistaActividadAdmin tabla, Alquiler alquiler, Integer operacion) {
        this.tabla = tabla;
        this.operacion = operacion;
        this.alquiler = alquiler;
        initComponents();
        cnx = Conexion.getInstance().getConnection();
        cargaCombos();
        if (operacion == Alquiler.RESERVAR){
            setearFechas();
        }else{
            cargarAlquiler(alquiler.id);
        }
        selectContrato();
        setTitle(titulos[operacion]);
        getRootPane().setDefaultButton(jbtnAceptar);
    }
    
    public AltaAlquiler() {
        this(null, new Alquiler(), 0);
    }
    
    public AltaAlquiler(VistaActividadAdmin tabla){
        this(tabla, new Alquiler(), 0);
    }
    
    public AltaAlquiler(VistaActividadAdmin tabla, Alquiler alquiler){
        this(tabla, alquiler, Alquiler.MODIFICAR);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlblFecha = new javax.swing.JLabel();
        jlblAlqFecha = new javax.swing.JLabel();
        jlblOperador = new javax.swing.JLabel();
        jlblAlqOperador = new javax.swing.JLabel();
        jlblUF = new javax.swing.JLabel();
        jcbxUF = new treintayplaya.ComboTabla();
        jlblCliente = new javax.swing.JLabel();
        jcbxCliente = new treintayplaya.ComboTabla();
        ((ComboTabla)jcbxCliente).addItem(" ", 0);
        jlblFIN = new javax.swing.JLabel();
        jdcFIN = new com.toedter.calendar.JDateChooser();
        jlblFOUT = new javax.swing.JLabel();
        jdcFOUT = new com.toedter.calendar.JDateChooser();
        jpnlPax = new javax.swing.JPanel();
        jcbxAdultos = new javax.swing.JComboBox();
        jlblAdultos = new javax.swing.JLabel();
        jcbxMenores = new javax.swing.JComboBox();
        jlblMenores = new javax.swing.JLabel();
        jcbxBebes = new javax.swing.JComboBox();
        jlblBebes = new javax.swing.JLabel();
        jcbxDesayunos = new javax.swing.JComboBox();
        jlblDesayunos = new javax.swing.JLabel();
        jlblDesayunos1 = new javax.swing.JLabel();
        jcbxDesayunosImp = new javax.swing.JComboBox();
        jlblContratoCli = new javax.swing.JLabel();
        jcbxContratoCli = new treintayplaya.ComboTabla();
        jlblvencimiento = new javax.swing.JLabel();
        jdcVencimiento = new com.toedter.calendar.JDateChooser();
        lblDifImputacion = new javax.swing.JLabel();
        jftfDifImputacion = new javax.swing.JFormattedTextField();
        jbtnAceptar = new javax.swing.JButton();
        jbtnCancelar = new javax.swing.JButton();
        jpnlDetPagos = new javax.swing.JPanel();
        jcbxFormaPagoOperacion = new ComboTabla();
        jlblFormaPagoOperacion = new javax.swing.JLabel();
        jlblFormaPagoImputacion = new javax.swing.JLabel();
        jcbxFormaPagoImputacion = new ComboTabla();
        jlblCuenta = new javax.swing.JLabel();
        jcbxCuenta = new ComboTabla();
        jbtnNuevoInquilino = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaObservaciones = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jlblImporte1 = new javax.swing.JLabel();
        jftfTotal = new javax.swing.JFormattedTextField();
        jlblImporte2 = new javax.swing.JLabel();
        jftfImporteReserva = new javax.swing.JFormattedTextField();
        jlblSaldo = new javax.swing.JLabel();
        jlblSaldo.setVisible(this.operacion > 0);
        jcbxContratoProp = new treintayplaya.ComboTabla();
        jlblContratoProp = new javax.swing.JLabel();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Alta de Reserva Provisoria");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jlblFecha.setText("Fecha:");

        jlblAlqFecha.setBackground(new java.awt.Color(255, 255, 255));
        jlblAlqFecha.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlblAlqFecha.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jlblOperador.setText("Operador:");

        jlblAlqOperador.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jlblAlqOperador.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlblAlqOperador.setText(DatosGlobales.usrEmail);
        jlblAlqOperador.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jlblUF.setText("Unidad Funcional:");

        jcbxUF.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbxUFItemStateChanged(evt);
            }
        });

        jlblCliente.setText("Inquilino:");

        jlblFIN.setText("Fecha IN:");

        jdcFIN.setDateFormatString("dd-MM-yyyy HH:mm");

        jlblFOUT.setText("Fecha OUT:");

        jdcFOUT.setDateFormatString("dd-MM-yyyy HH:mm");

        jpnlPax.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ocupantes", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(255, 0, 0)));
        jpnlPax.setName("");

        jcbxAdultos.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" }));

        jlblAdultos.setText("Adultos");

        jcbxMenores.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" }));

        jlblMenores.setText("Menores");

        jcbxBebes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" }));

        jlblBebes.setText("Bebes");

        jcbxDesayunos.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" }));

        jlblDesayunos.setText("Desayunos");

        jlblDesayunos1.setText("Desayunos Imputados");

        jcbxDesayunosImp.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" }));

        org.jdesktop.layout.GroupLayout jpnlPaxLayout = new org.jdesktop.layout.GroupLayout(jpnlPax);
        jpnlPax.setLayout(jpnlPaxLayout);
        jpnlPaxLayout.setHorizontalGroup(
            jpnlPaxLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jpnlPaxLayout.createSequentialGroup()
                .add(jcbxAdultos, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 57, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jlblAdultos)
                .add(30, 30, 30)
                .add(jcbxMenores, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 59, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(3, 3, 3)
                .add(jlblMenores)
                .add(27, 27, 27)
                .add(jcbxBebes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(3, 3, 3)
                .add(jlblBebes)
                .add(96, 96, 96)
                .add(jcbxDesayunos, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jlblDesayunos)
                .add(11, 11, 11)
                .add(jcbxDesayunosImp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jlblDesayunos1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 152, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(22, 22, 22))
        );
        jpnlPaxLayout.setVerticalGroup(
            jpnlPaxLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jpnlPaxLayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jpnlPaxLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(jcbxAdultos, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jlblAdultos)
                    .add(jcbxMenores, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jlblMenores)
                    .add(jcbxBebes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jlblBebes)
                    .add(jcbxDesayunos, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jlblDesayunos)
                    .add(jcbxDesayunosImp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jlblDesayunos1))
                .addContainerGap())
        );

        jlblContratoCli.setText("Contrato Cliente:");

        jlblvencimiento.setText("Vencimiento de Reserva:");

        jdcVencimiento.setDateFormatString("dd-MM-yyyy");

        lblDifImputacion.setText("Dif. Imputación:");

        jftfDifImputacion.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        jftfDifImputacion.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jftfDifImputacion.setValue(0);
        jftfDifImputacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jftfDifImputacionFocusLost(evt);
            }
        });

        jbtnAceptar.setMnemonic('A');
        jbtnAceptar.setText("Aceptar");
        jbtnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnAceptarActionPerformed(evt);
            }
        });

        jbtnCancelar.setMnemonic('C');
        jbtnCancelar.setText("Cancelar");
        jbtnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCancelarActionPerformed(evt);
            }
        });

        jpnlDetPagos.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Detalles de Pagos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(255, 0, 0)));

        jcbxFormaPagoOperacion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbxFormaPagoOperacionItemStateChanged(evt);
            }
        });
        jcbxFormaPagoOperacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jcbxFormaPagoOperacionFocusLost(evt);
            }
        });

        jlblFormaPagoOperacion.setText("Forma de Pago de Operación:");

        jlblFormaPagoImputacion.setText("Forma de Pago de Imputación:");

        jcbxFormaPagoImputacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jcbxFormaPagoImputacionFocusLost(evt);
            }
        });

        jlblCuenta.setText("Cuenta de depósito:");

        jcbxCuenta.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jcbxCuentaFocusLost(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jpnlDetPagosLayout = new org.jdesktop.layout.GroupLayout(jpnlDetPagos);
        jpnlDetPagos.setLayout(jpnlDetPagosLayout);
        jpnlDetPagosLayout.setHorizontalGroup(
            jpnlDetPagosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jpnlDetPagosLayout.createSequentialGroup()
                .add(jpnlDetPagosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jlblFormaPagoOperacion)
                    .add(jlblFormaPagoImputacion)
                    .add(jlblCuenta))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jpnlDetPagosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jcbxFormaPagoOperacion, 0, 202, Short.MAX_VALUE)
                    .add(jcbxFormaPagoImputacion, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jcbxCuenta, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jpnlDetPagosLayout.setVerticalGroup(
            jpnlDetPagosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jpnlDetPagosLayout.createSequentialGroup()
                .add(jpnlDetPagosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jlblFormaPagoOperacion)
                    .add(jcbxFormaPagoOperacion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jpnlDetPagosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jlblFormaPagoImputacion)
                    .add(jcbxFormaPagoImputacion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jpnlDetPagosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jlblCuenta)
                    .add(jcbxCuenta, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );

        jbtnNuevoInquilino.setText("Nuevo");
        jbtnNuevoInquilino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnNuevoInquilinoActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jtaObservaciones);

        jLabel3.setText("Observaciones:");

        jlblImporte1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jlblImporte1.setText("Importe Total:");

        jftfTotal.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        jftfTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jftfTotal.setValue(0);
        jftfTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jftfTotalActionPerformed(evt);
            }
        });
        jftfTotal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jftfTotalFocusLost(evt);
            }
        });

        jlblImporte2.setText("Importe Reserva:");
        jlblImporte2.setText(this.operacion == 0 ? "Importe mínimo de reserva:":"Importe reserva");

        jftfImporteReserva.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        jftfImporteReserva.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jftfImporteReserva.setValue(0);
        jftfImporteReserva.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jftfImporteReservaFocusLost(evt);
            }
        });

        jlblSaldo.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jlblSaldo.setForeground(new java.awt.Color(255, 0, 0));
        jlblSaldo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jlblSaldo.setText("Saldo:");

        jlblContratoProp.setText("Contrato Propietario:");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jbtnAceptar)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jbtnCancelar))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createSequentialGroup()
                                        .addContainerGap()
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                            .add(layout.createSequentialGroup()
                                                .add(jlblContratoCli)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .add(jcbxContratoCli, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 263, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                            .add(layout.createSequentialGroup()
                                                .add(jlblContratoProp)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .add(jcbxContratoProp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 263, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                                    .add(layout.createSequentialGroup()
                                        .add(10, 10, 10)
                                        .add(jpnlDetPagos, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                                .add(31, 31, 31)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jlblImporte2)
                                    .add(jlblImporte1)
                                    .add(lblDifImputacion)
                                    .add(jlblvencimiento)))
                            .add(layout.createSequentialGroup()
                                .addContainerGap()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 446, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jLabel3))))
                        .add(12, 12, 12)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jlblSaldo)
                            .add(jftfTotal)
                            .add(jftfImporteReserva)
                            .add(jftfDifImputacion)
                            .add(jdcVencimiento, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .add(layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jpnlPax, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 905, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jlblFecha, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 122, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jlblUF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 131, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jlblFIN, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 105, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(9, 9, 9)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jdcFIN, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 299, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jcbxUF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 130, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jlblAlqFecha, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 307, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(15, 15, 15)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jlblOperador, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jlblCliente, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jlblFOUT))
                                .add(7, 7, 7)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(jdcFOUT, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 326, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(layout.createSequentialGroup()
                                        .add(jcbxCliente, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 245, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .add(jbtnNuevoInquilino))
                                    .add(jlblAlqOperador, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 326, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(12, 12, 12)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jlblFecha, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jlblAlqFecha, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jlblOperador, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jlblAlqOperador, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(jlblUF))
                    .add(layout.createSequentialGroup()
                        .add(7, 7, 7)
                        .add(jcbxUF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(jlblCliente))
                    .add(layout.createSequentialGroup()
                        .add(6, 6, 6)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jcbxCliente, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jbtnNuevoInquilino))))
                .add(6, 6, 6)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jdcFIN, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jdcFOUT, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(5, 5, 5)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jlblFIN)
                            .add(jlblFOUT))))
                .add(12, 12, 12)
                .add(jpnlPax, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(11, 11, 11)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(jlblContratoCli)
                    .add(jcbxContratoCli, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jlblvencimiento)
                    .add(jdcVencimiento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(11, 11, 11)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(jlblContratoProp)
                    .add(jcbxContratoProp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(17, 17, 17)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                            .add(jftfDifImputacion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(lblDifImputacion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                            .add(jftfImporteReserva, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jlblImporte2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                            .add(jftfTotal, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jlblImporte1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(18, 18, 18)
                        .add(jlblSaldo)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jbtnCancelar)
                            .add(jbtnAceptar)))
                    .add(layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(jpnlDetPagos, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jLabel3)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 11, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jpnlPax.getAccessibleContext().setAccessibleName("");
        jpnlDetPagos.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCancelarActionPerformed
        dispose();
    }//GEN-LAST:event_jbtnCancelarActionPerformed

    
    private void jbtnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnAceptarActionPerformed
        if (validaFormulario()){
            boolean insert1 = false;
            try {
                cnx.setAutoCommit(false);
                insert1 = insertAlquiler();
                if (insert1){
                    if (alquiler.id == 0){
                        alquiler = new Alquiler(getUltimoAlquiler());
                    }else{
                        alquiler = new Alquiler(alquiler.id);
                        deleteDetalleAlquiler(alquiler.id);
                    }
                    insertDetalleAlquiler(alquiler.id);
                }
                if (((ComboTabla)jcbxContratoCli).getSelectedId() > 0 && operacion != alquiler.MODIFICAR)
                    enviarContratos();
            } catch(java.sql.SQLException sqle) {
                sqle.printStackTrace();
                try {
                    cnx.rollback();
                } catch (SQLException ex) {}
            } finally {
                try {
                    cnx.setAutoCommit(true);
                } catch (SQLException ex) {}
            }
            if (insert1){
                if (tabla != null)
                    tabla.updateTable();
                dispose();
            }
        }
    }//GEN-LAST:event_jbtnAceptarActionPerformed

    private void jcbxUFItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbxUFItemStateChanged
        
    }//GEN-LAST:event_jcbxUFItemStateChanged

    private void jbtnNuevoInquilinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnNuevoInquilinoActionPerformed
        AltaInquilinos inquilinos = new AltaInquilinos(this);
        AppPrincipal.desktopPane.add(inquilinos);
        inquilinos.show();
        inquilinos.toFront();
    }//GEN-LAST:event_jbtnNuevoInquilinoActionPerformed

    private void jftfDifImputacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jftfDifImputacionFocusLost
        try {
            jftfDifImputacion.commitEdit();
        } catch (ParseException ex) {
            Logger.getLogger(AltaAlquiler.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jftfDifImputacionFocusLost

    private void jftfImporteReservaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jftfImporteReservaFocusLost
        try {
            jftfImporteReserva.commitEdit();
            calcularSaldo();
        } catch (ParseException ex) {
            Logger.getLogger(AltaAlquiler.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jftfImporteReservaFocusLost

    private void jftfTotalFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jftfTotalFocusLost
        try {
            jftfTotal.commitEdit();
            calcularSaldo();
            if (operacion == Alquiler.RESERVAR)
                calcularImporteMinimoReserva();
        } catch (ParseException ex) {
            Logger.getLogger(AltaAlquiler.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jftfTotalFocusLost

    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated
        if (operacion != Alquiler.RESERVAR && operacion != Alquiler.MODIFICAR){
            jftfImporteReserva.requestFocusInWindow();
        }
    }//GEN-LAST:event_formInternalFrameActivated

    private void jcbxFormaPagoOperacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jcbxFormaPagoOperacionFocusLost
        if (evt.getOppositeComponent().equals(jbtnCancelar) || evt.getOppositeComponent().equals(jcbxFormaPagoImputacion))
            return;
        validaCombosFormaDePago((ComboTabla)jcbxFormaPagoOperacion);
    }//GEN-LAST:event_jcbxFormaPagoOperacionFocusLost

    private void jcbxFormaPagoImputacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jcbxFormaPagoImputacionFocusLost
        if (evt.getOppositeComponent().equals(jbtnCancelar) || evt.getOppositeComponent().equals(jcbxFormaPagoOperacion))
            return;
        validaCombosFormaDePago((ComboTabla)jcbxFormaPagoImputacion);
    }//GEN-LAST:event_jcbxFormaPagoImputacionFocusLost

    private void jcbxCuentaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jcbxCuentaFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbxCuentaFocusLost

    private void jcbxFormaPagoOperacionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbxFormaPagoOperacionItemStateChanged
        setearCuenta(((ComboTabla)jcbxFormaPagoOperacion).isItemBeforeEspecial(1));
    }//GEN-LAST:event_jcbxFormaPagoOperacionItemStateChanged

    private void jftfTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jftfTotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jftfTotalActionPerformed

    private void cargaCombos() {
        Funciones.cargarComboTabla((ComboTabla)jcbxUF, "select ufNombre, ufID from UnidadesFuncionales where ufTipo > 0 order by ufNombre", "ufNombre", "ufID");
        Funciones.cargarComboTabla((ComboTabla)jcbxContratoCli, "select conTipo, ID from Contratos order by ID", "conTipo", "ID");
        Funciones.cargarComboTabla((ComboTabla)jcbxContratoProp, "select conTipo, ID from Contratos order by ID", "conTipo", "ID");
        String[] destinos = {"", "Comercializadora", "Propietario"};
        Funciones.cargarComboTablaEspecial((ComboTabla)jcbxFormaPagoOperacion, "select fpNombre, fpDestino, fpID from FormasPago order by fpDestino, fpNombre", "fpNombre", "fpID", "fpDestino", destinos);
        Funciones.cargarComboTablaEspecial((ComboTabla)jcbxFormaPagoImputacion, "select fpNombre, fpDestino, fpID from FormasPago order by fpDestino, fpNombre", "fpNombre", "fpID", "fpDestino", destinos);
        jcbxFormaPagoImputacion.setSelectedIndex(-1);
        jcbxFormaPagoOperacion.setSelectedIndex(-1);
        this.cargarInquilinos();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtnAceptar;
    private javax.swing.JButton jbtnCancelar;
    private javax.swing.JButton jbtnNuevoInquilino;
    private javax.swing.JComboBox jcbxAdultos;
    private javax.swing.JComboBox jcbxBebes;
    public javax.swing.JComboBox jcbxCliente;
    private javax.swing.JComboBox jcbxContratoCli;
    private javax.swing.JComboBox jcbxContratoProp;
    private javax.swing.JComboBox jcbxCuenta;
    private javax.swing.JComboBox jcbxDesayunos;
    private javax.swing.JComboBox jcbxDesayunosImp;
    private javax.swing.JComboBox jcbxFormaPagoImputacion;
    private javax.swing.JComboBox jcbxFormaPagoOperacion;
    private javax.swing.JComboBox jcbxMenores;
    private javax.swing.JComboBox jcbxUF;
    private com.toedter.calendar.JDateChooser jdcFIN;
    private com.toedter.calendar.JDateChooser jdcFOUT;
    private com.toedter.calendar.JDateChooser jdcVencimiento;
    private javax.swing.JFormattedTextField jftfDifImputacion;
    private javax.swing.JFormattedTextField jftfImporteReserva;
    private javax.swing.JFormattedTextField jftfTotal;
    private javax.swing.JLabel jlblAdultos;
    private javax.swing.JLabel jlblAlqFecha;
    private javax.swing.JLabel jlblAlqOperador;
    private javax.swing.JLabel jlblBebes;
    private javax.swing.JLabel jlblCliente;
    private javax.swing.JLabel jlblContratoCli;
    private javax.swing.JLabel jlblContratoProp;
    private javax.swing.JLabel jlblCuenta;
    private javax.swing.JLabel jlblDesayunos;
    private javax.swing.JLabel jlblDesayunos1;
    private javax.swing.JLabel jlblFIN;
    private javax.swing.JLabel jlblFOUT;
    private javax.swing.JLabel jlblFecha;
    private javax.swing.JLabel jlblFormaPagoImputacion;
    private javax.swing.JLabel jlblFormaPagoOperacion;
    private javax.swing.JLabel jlblImporte1;
    private javax.swing.JLabel jlblImporte2;
    private javax.swing.JLabel jlblMenores;
    private javax.swing.JLabel jlblOperador;
    private javax.swing.JLabel jlblSaldo;
    private javax.swing.JLabel jlblUF;
    private javax.swing.JLabel jlblvencimiento;
    private javax.swing.JPanel jpnlDetPagos;
    private javax.swing.JPanel jpnlPax;
    private javax.swing.JTextArea jtaObservaciones;
    private javax.swing.JLabel lblDifImputacion;
    // End of variables declaration//GEN-END:variables

    void selectUF(Integer id) {
        ((ComboTabla)jcbxUF).setSelectedItemById(id);
    }

    void setFechaInicial(GregorianCalendar fechaInicial) {
        jdcFIN.setCalendar(fechaInicial);
    }
    
    void setFechaFinal(GregorianCalendar fechaFinal) {
        jdcFOUT.setCalendar(fechaFinal);
    }

    private boolean validaFormulario() {
        if (! validaCombosFormaDePago((ComboTabla)jcbxFormaPagoImputacion))
            return false;
        if (! Funciones.validaComboTabla(this, (ComboTabla)jcbxCuenta, "Cuenta de depósito"))
            return false;
        return true;
    }

    private boolean insertAlquiler() throws SQLException{
        String query = "INSERT INTO Alquileres (alqFecha, alqEstado, alqOperador, alqUF, alqCliente, alqFIN, alqFOUT, "
                        + "alqOcupantesA, alqOcupantesM, alqOcupantesB, alqDesayunos, alqDesayunosImp, alqContratoCli, "
                        + "alqContratoProp, alqTotal, alqDifImputacion, alqVencimiento, alqFormaPagoOpe, "
                        + "alqFormaPagoImp, alqObservaciones, alqImporteMinReserva, alqCuentaPropID, alqImporteReserva) "
                        + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 0)";
        if (alquiler.id > 0){
            query = "UPDATE Alquileres SET alqFecha=?, alqEstado=?, alqOperador=?, alqUF=?, alqCliente=?, alqFIN=?, alqFOUT=?, "
                    + "alqOcupantesA=?, alqOcupantesM=?, alqOcupantesB=?, alqDesayunos=?, alqDesayunosImp=?, alqContratoCli=?, "
                    + "alqContratoProp=?, alqTotal=?, alqDifImputacion=?, alqVencimiento=?, alqFormaPagoOpe=?, alqFormaPagoImp=?, "
                    + "alqObservaciones=?, alqImporteReserva=?, alqCuentaPropId=? WHERE alqID=?";
        }

        java.sql.PreparedStatement pstm = cnx.prepareStatement(query);

        int ufID = ((ComboTabla)jcbxUF).getSelectedId();
        int cliID = ((ComboTabla)jcbxCliente).getSelectedId();
        String fIN = FechasFormatter.getFechaString(jdcFIN.getCalendar());
        String fOUT = FechasFormatter.getFechaString(jdcFOUT.getCalendar());
        String vencimiento = FechasFormatter.getFechaString(jdcVencimiento.getCalendar());
        Integer estado = this.operacion == Alquiler.MODIFICAR ? alquiler.tipo : this.operacion;

        pstm.setString( 1, jlblAlqFecha.getText());
        pstm.setInt   ( 2, estado); 
        pstm.setInt   ( 3, DatosGlobales.usrID);
        pstm.setInt   ( 4, ufID);
        pstm.setInt   ( 5, cliID);
        pstm.setString( 6, fIN);
        pstm.setString( 7, fOUT);
        pstm.setInt   ( 8, Integer.valueOf(jcbxAdultos.getSelectedItem().toString()));
        pstm.setInt   ( 9, Integer.valueOf(jcbxMenores.getSelectedItem().toString()));
        pstm.setInt   (10, Integer.valueOf(jcbxBebes.getSelectedItem().toString()));
        pstm.setInt   (11, Integer.valueOf(jcbxDesayunos.getSelectedItem().toString()));
        pstm.setInt   (12, Integer.valueOf(jcbxDesayunosImp.getSelectedItem().toString()));
        pstm.setInt   (13, ((ComboTabla)jcbxContratoCli).getSelectedId());
        pstm.setInt   (14, jcbxContratoProp.isEnabled() ? ((ComboTabla)jcbxContratoProp).getSelectedId() : 0);
        pstm.setDouble(15, Double.valueOf(jftfTotal.getValue().toString()));
        pstm.setDouble(16, Double.valueOf(jftfDifImputacion.getValue().toString()));
        pstm.setString(17, vencimiento);
        pstm.setInt   (18, ((ComboTabla)jcbxFormaPagoOperacion).getSelectedId());
        pstm.setInt   (19, ((ComboTabla)jcbxFormaPagoImputacion).getSelectedId());
        pstm.setString(20, jtaObservaciones.getText());
        pstm.setDouble(21, Double.valueOf(jftfImporteReserva.getValue().toString()));
	pstm.setInt   (22, ((ComboTabla)jcbxCuenta).getSelectedId());
        if(alquiler.id > 0){
            pstm.setInt(23, this.alquiler.id);
        }
        
        int result = pstm.executeUpdate();
        return result == 1;
    }

    private int getUltimoAlquiler() throws SQLException {
        String query = "SELECT LAST_INSERT_ID() as id FROM Alquileres LIMIT 1";
        java.sql.Statement st  = cnx.createStatement();
        java.sql.ResultSet rst = st.executeQuery(query);
        rst.next();
        int id = rst.getInt("id");
        rst.close();
        st.close();
        return id;
    }

    private void insertDetalleAlquiler(int alqID) throws SQLException {
        long firstDayMillis = jdcFIN.getCalendar().getTimeInMillis();
        long lastDayMillis = jdcFOUT.getCalendar().getTimeInMillis();
        int dias = (int)((lastDayMillis - firstDayMillis) / 1000 / 60 / 60 / 24);
        GregorianCalendar calendar = (GregorianCalendar)jdcFIN.getCalendar();
                
        String query = "INSERT INTO DetAlquileres (dalqAlq, dalqFecha) VALUES ";
        for (int i=0; i<=dias; i++){         
            String aux = "(" + String.valueOf(alqID) + ", '" + FechasFormatter.getFechaSimpleString(calendar) + "')";
            if (i < dias)
                aux += ", ";
            
            query += aux;
            calendar.add(GregorianCalendar.DATE, 1);
        }

        java.sql.PreparedStatement pstm = cnx.prepareStatement(query);
        pstm.executeUpdate();
    }

    private void setearFechas() {
        fechas = new Thread(new Runnable() {
            @Override
            public void run() {
                while ( ! isClosed()){
                    try {
                        fechaActual = new GregorianCalendar();
                        GregorianCalendar fechaVencimiento = (GregorianCalendar)fechaActual.clone();
                        fechaVencimiento.add(GregorianCalendar.HOUR, 48);
                        jlblAlqFecha.setText(FechasFormatter.getFechaString(fechaActual));
                        jdcVencimiento.setCalendar(fechaVencimiento);
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(AltaAlquiler.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });
        fechas.start();
    }

    private void cargarAlquiler(Integer alquilerID) {
        if (alquilerID < 1){
            throw new NullPointerException("alquilerID debe ser mayor a 0");
        }
        try {
            String query = "SELECT * FROM Alquileres INNER JOIN UsuariosWeb ON alqOperador= usrID WHERE alqID = ?";
            java.sql.PreparedStatement pstm = cnx.prepareStatement(query);
            pstm.setInt(1, alquilerID);
            java.sql.ResultSet rst = pstm.executeQuery();
            
            rst.next();
            jlblAlqFecha.setText(rst.getString("alqFecha").substring(0, 19));
            jdcVencimiento.setCalendar(FechasFormatter.getFechaCalendar(rst.getString("alqVencimiento")));
            jlblAlqOperador.setText(rst.getString("usrEmail"));
            selectUF(rst.getInt("alqUF"));
            ((ComboTabla)jcbxCliente).setSelectedItemById(rst.getInt("alqCliente"));
            jdcFIN.setCalendar(FechasFormatter.getFechaCalendar(rst.getString("alqFIN")));
            jdcFOUT.setCalendar(FechasFormatter.getFechaCalendar(rst.getString("alqFOUT")));
            jcbxAdultos.setSelectedItem(String.valueOf(rst.getInt("alqOcupantesA")));
            jcbxMenores.setSelectedItem(String.valueOf(rst.getInt("alqOcupantesM")));
            jcbxBebes.setSelectedItem(String.valueOf(rst.getInt("alqOcupantesB")));
            jcbxDesayunos.setSelectedItem(String.valueOf(rst.getInt("alqDesayunos")));
            jcbxDesayunosImp.setSelectedItem(String.valueOf(rst.getInt("alqDesayunosImp")));
            ((ComboTabla)jcbxContratoCli).setSelectedItemById(rst.getInt("alqContratoCli"));
            ((ComboTabla)jcbxContratoProp).setSelectedItemById(rst.getInt("alqContratoProp"));
            jftfDifImputacion.setValue(rst.getDouble("alqDifImputacion"));
            jftfTotal.setValue(rst.getDouble("alqTotal"));
            ((ComboTabla)jcbxFormaPagoOperacion).setSelectedItemById(rst.getInt("alqFormaPagoOpe"));
            ((ComboTabla)jcbxFormaPagoImputacion).setSelectedItemById(rst.getInt("alqFormaPagoImp"));
            jtaObservaciones.setText(rst.getString("alqObservaciones"));
            jftfImporteReserva.setValue(rst.getDouble("alqImporteReserva"));
            ((ComboTabla)jcbxCuenta).setSelectedItemById(rst.getInt("alqCuentaPropID"));
            
            calcularSaldo();
        } catch (SQLException ex) {
            Logger.getLogger(AltaAlquiler.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    private void deleteDetalleAlquiler(Integer id) throws SQLException {
        String query = "DELETE FROM DetAlquileres WHERE dalqAlq = ?";
        java.sql.PreparedStatement pstm = cnx.prepareStatement(query);
        pstm.setInt(1, id);
        pstm.executeUpdate();
    }

    void cargarInquilinos() {
        try {
            jcbxCliente.removeAllItems();
            java.sql.Statement stmClientes   = cnx.createStatement();
            java.sql.ResultSet rstClientes   = stmClientes.executeQuery("select cliID, cliApellido, cliNombre from Clientes order by cliApellido");
            while(rstClientes.next()){
                int cliID = rstClientes.getInt("cliID");
                String apellido = rstClientes.getString("cliApellido");
                String nombre = rstClientes.getString("cliNombre");
                ((ComboTabla)jcbxCliente).addItem(apellido + ", " + nombre, cliID);
            }
            rstClientes.close();
            stmClientes.close();
        } catch (SQLException ex) {
            Logger.getLogger(AltaAlquiler.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void calcularSaldo() {
        Double total = Double.valueOf(jftfTotal.getValue().toString());
        Double reserva = Double.valueOf(jftfImporteReserva.getValue().toString());
        Double saldo = total - reserva;
        if (saldo == 0.0){
            jlblSaldo.setForeground(new Color(10,250,10));
            if (operacion == Alquiler.CANCELAR)
                jbtnAceptar.setEnabled(true);
        }else{
            jlblSaldo.setForeground(Color.red);
            if (operacion == Alquiler.CANCELAR)
                jbtnAceptar.setEnabled(false);
        }
        String strSaldo= "Saldo: " + Funciones.formatNumber(saldo, "#,##0.00");
        jlblSaldo.setText(strSaldo);
    }
    
    private void calcularImporteMinimoReserva() {
        if (Double.valueOf(jftfImporteReserva.getValue().toString()) != 0)
            return;
        Double total = Double.valueOf(jftfTotal.getValue().toString());
        Double importeMinimo = total / 2;
        jftfImporteReserva.setValue(importeMinimo);
    }

    private void selectContrato() {
        switch(operacion){
            case Alquiler.RESERVAR:
                jcbxContratoProp.setSelectedIndex(-1);
                jcbxContratoProp.setEnabled(false);
                jcbxContratoCli.setSelectedIndex(0);
                break;
            case Alquiler.CONFIRMAR:
                jcbxContratoCli.setSelectedIndex(1);
                jcbxContratoProp.setSelectedIndex(2);
                break;
            case Alquiler.CANCELAR:
                jcbxContratoCli.setSelectedIndex(3);
                jcbxContratoProp.setSelectedIndex(4);
                break;
        }
        
    }

    private void enviarContratos() {
        if (! AppPrincipal.configuracion.mailingActivado)
            return;
        if (jcbxContratoCli.isEnabled()){
            Integer contratoID = ((ComboTabla)jcbxContratoCli).getSelectedId();
            try{
                String contrato = ContratosFactory.createContrato(contratoID, alquiler);
                AppPrincipal.mailSender.send(alquiler.email, "", contrato);
            }catch(Exception e){
                JOptionPane.showMessageDialog(this, "Ocurrió el siguiente error al enviar el mail al inquilino: " + e.getMessage(), "Error en el envío de mail", JOptionPane.ERROR_MESSAGE);
            }
        }
        if (jcbxContratoProp.isEnabled()){
            Integer contratoID = ((ComboTabla)jcbxContratoProp).getSelectedId();
            try{
                String contrato = ContratosFactory.createContrato(contratoID, alquiler);
                AppPrincipal.mailSender.send(alquiler.email_propietario, "", contrato);
            }catch(Exception e){
                JOptionPane.showMessageDialog(this, "Ocurrió el siguiente error al enviar el mail al propietario: " + e.getMessage(), "Error en el envío de mail", JOptionPane.ERROR_MESSAGE);
            }
        }        
    }

    private boolean validaCombosFormaDePago(ComboTabla combo) {
        //No puede haber seleccionado una forma de pago operacion a favor de la Comercializadora si el de imputacion es a favor del Propietario
        if (((ComboTabla)jcbxFormaPagoOperacion).isItemAfterEspecial(1) && ((ComboTabla)jcbxFormaPagoImputacion).isItemBeforeEspecial(1)){
            JOptionPane.showMessageDialog(this, "No puede ingresar una cuenta a favor de la Comercializadora cuando la cuenta de imputación es a favor del Propietario.", "Seleccione una Forma de Pago válida", JOptionPane.ERROR_MESSAGE);
            combo.requestFocusInWindow();
            return false;
        }          
        return true;
    }

    private void setearCuenta(boolean administrador) {
        String propID = "0";
        if (! administrador)
            propID = ((ComboTabla)jcbxUF).getSelectedId().toString();
        Funciones.cargarComboTabla((ComboTabla)jcbxCuenta, "SELECT propNCuenta, propID FROM Propietarios WHERE propUF = " + propID , "propNCuenta", "propID");
        jcbxCuenta.setSelectedIndex(-1);
    }   
    

}
